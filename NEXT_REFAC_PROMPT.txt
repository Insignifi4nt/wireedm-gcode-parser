Next Refactor Session Prompt — Continue per RefactoringPlan

Context
- Repo: WireEDM_app (Vite app). Entry: index.html → src/main.js.
- Branch: refactor (current working branch).
- Scripts: npm run dev, npm run build, npm run preview. Node >= 16.
- Coding style: src/standards/CodingStandards.md (ES modules, semicolons, 2‑space indent, named exports).

Source of Truth
- Read RefactoringFiles/RefactoringPlan.md for up‑to‑date status, priorities, and per‑file scope locations.

What's Done (So Far)
- GCodeDrawer: PR1–PR5 completed (Sanitize, UndoRedoSystem, MultiSelectHandler, DrawerToolbar, GCodeEditor).
- Canvas: PR1–PR5 completed (CanvasGrid, PathHighlights, MarkerRenderer, CanvasRenderer, cleanup).
- EventManager: PR0–PR9 completed (EventTypes, Schemas, Validator, EventBus, DOMDelegation, EmitControls, EventHistory, bridge, cleanup).
- main.js: PR0–PR8 completed (ComponentInitializer DOM/init, EventWiring, AppOrchestrator, slim bootstrap, cleanup/docs).
- Toolbar: PR0–PR5 completed (FileControls, ViewControls, ActionControls, orchestration, cleanup).
- StatusMessage: PR0–PR5 completed (NotificationStyles, MessageQueue, ToastManager; StatusMessage as orchestrator). PR4 fixed broken getStats(), PR5 removed dead code/stubs.
- TouchEventHandler: PR0–PR4 completed (TouchGestures gesture recognition, TouchInteractions viewport handling; TouchEventHandler as orchestrator). 537 → 267 lines (50% reduction).

Next Session Objectives (Start Here)
1) Review RefactoringFiles/RefactoringPlan.md and select the next refactor target based on "Priority Order". Next target: MathUtils.js (531 lines) for geometry utilities split.
2) Draft the plan for the chosen target BEFORE coding:
   - Add RefactoringFiles/<Target>/00-scope.md with goals, non‑goals, constraints, moduleization plan, PR sequence, acceptance criteria, and validation.
   - Add RefactoringFiles/<Target>/PRs/PR0-*.md (scaffold) and initial PRs with clear scope + verification steps (keep PRs small and behavior‑preserving).
3) Implement PR0 (scaffold stubs) and verify build.
4) Implement PR1 extraction following the established pattern (small, focused, stable contracts), updating docs and plan as you go.

Constraints
- Preserve public APIs and event semantics; behavior parity is mandatory.
- Keep DOM IDs/classes and visual output unchanged (no CSS or UX changes unless explicitly scoped in docs).
- Avoid import churn outside the targeted module; favor re‑exports/compat layers if needed.

Commit Style
- One focused commit per PR with multi‑paragraph message (subject: type(scope): summary with PR label). Include brief bullets, docs references, and rationale. See AGENTS.md for formatting.

Validation
- Ensure npm run build passes after each PR.
- Manual smoke per module: verify events, redraws, and state updates mirror pre‑refactor behavior; no duplicate listeners or regressions.

Deliverable for First Step of Next Session
- Produce the planning docs for the next file refactor (00‑scope.md and PRs/PR0… files). Confirm alignment with RefactoringPlan.md, then proceed to PR0/PR1 implementation.


Next Refactor Session Prompt — Continue With EventManager.js

Context
- Repo: WireEDM_app (Vite app). Entry: index.html → src/main.js.
- Branch to use: refactor (current working branch with GCodeDrawer PR1–PR5 and Canvas PR1–PR5 completed).
- Build: npm run build; Dev: npm run dev.
- Coding style: src/standards/CodingStandards.md (ES modules, semicolons, 2-space indent, named exports).
- Commit style: single descriptive commit per PR using multiple -m paragraphs (as documented in AGENTS.md). Do not push; I’ll push.

What’s Done (So Far)
- GCodeDrawer refactor complete (PR1–PR5); drawer now orchestrates Editor/Toolbar/Undo/Selection.
- Canvas refactor complete (PR1–PR5); Canvas delegates to CanvasGrid, PathHighlights, MarkerRenderer, CanvasRenderer.

Goal (Next File)
- Start refactoring src/core/EventManager.js (~1,060 lines) per RefactoringFiles/RefactoringPlan.md.
- Preserve behavior and public API used across the app (EventBus singleton, EVENT_TYPES enum, delegated helpers/utilities). Minimize surface changes; keep imports stable.
- Use as many PRs as needed for a clean split (not limited to five) to truly improve maintainability and testability.

First Step (Critical)
- Re-evaluate and, if needed, adjust the EventManager refactor plan before implementing:
  - Verify current EventManager.js structure and responsibilities (EventBus, EVENT_TYPES, validation, delegation utilities).
  - Confirm actual imports/usages in src/main.js and all components (Toolbar, Sidebar, Drawer, StatusMessage, EventIntegration, Mouse/Touch/Keyboard handlers).
  - Update RefactoringFiles/EventManager/* (scope/PRs) if the plan should change, then proceed.

Research First
1) Skim src/core/EventManager.js to map concerns: singleton EventBus, event type registry (EVENT_TYPES), validation/schema helpers, DOM delegation helpers, error handling, logging.
2) Confirm how it’s used in the codebase: imports of { EventBus, EVENT_TYPES, EventUtils } in core/components/utils; check for default export and any legacy usages.
3) Check src/standards/CodingStandards.md for import grouping and naming conventions (named exports preferred; keep public API stable during split).

Implementation Plan (EventManager)
- Create/maintain RefactoringFiles/EventManager/00-scope.md and PR docs.
- PR0: Scaffold events directory and optional barrel.
- PR1: Extract EventTypes (constants).
- PR2: Extract EventSchemas (payload schemas).
- PR3: Extract EventValidator (validation logic using types + schemas).
- PR4: Extract EventBus (singleton + wrappers).
- PR5: Extract DOMDelegation (delegate + handler).
- PR6: Extract EmitControls (debounce, rateLimit, deduplicate).
- PR7: Extract EventHistory (history + metrics).
- PR8: Bridge layer: re-export `{ EventBus, EVENT_TYPES, EventSchemas, EventValidator, DOMDelegation, EmitControls, EventHistory }` from EventManager.
- PR9: Cleanup: remove duplicates; keep compatibility re-exports. Optionally, deprecate default export for later removal.

Constraints
- Keep public API stable during the transition; avoid breaking imports in main.js and components. Prefer re-exports from EventManager as a compatibility layer.
- No renaming of event types or semantics.
- No behavior changes to listener lifetime, emit semantics, or validation toggles.

Validation
- Build: npm run build passes after each PR.
- Manual checks: load file; drawer hover/click highlighting; add/delete/clear points; zoom/pan via controls and wheel; status messages; export flows.
- Performance: no regressions in event throughput; no duplicate listeners.

Commits
- Use a single commit per PR with multi-paragraph message, for example:
  - git add -A && git commit \
    -m "refactor(EventManager): PR1 extract EventBus and re-export for compatibility" \
    -m "- Add core/events/EventBus.js; move singleton + on/off/emit.\n- Update src/core/EventManager.js to re-export EventBus for minimal surface change.\n- Behavior unchanged; build passes." \
    -m "Docs:\n- Add RefactoringFiles/EventManager/PRs/PR1-EventBus.md; update scope and plan progress." \
    -m "Refs: RefactoringFiles/EventManager/PRs/PR1-EventBus.md"

Notes
- Keep diffs minimal; start with re-exports to avoid import churn, then progressively migrate direct imports when safe.
- Be cautious with default export of EventManager; preserve until the codebase is fully migrated to named imports.
